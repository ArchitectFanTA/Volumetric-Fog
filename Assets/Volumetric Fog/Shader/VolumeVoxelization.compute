//--------------------------------------------------------------------------------------------------
// Definitions
//--------------------------------------------------------------------------------------------------

// #pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel VolumeVoxelization

#define GROUP_SIZE_1D     8

//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

#include "./VolumetricLightingCommon.hlsl"

//--------------------------------------------------------------------------------------------------
// Inputs & outputs
//--------------------------------------------------------------------------------------------------

RW_TEXTURE3D(float4, _VBufferDensity); // RGB = sqrt(scattering), A = sqrt(extinction)

//--------------------------------------------------------------------------------------------------
// Implementation
//--------------------------------------------------------------------------------------------------

void FillVolumetricDensityBuffer(uint2 voxelCoord2D, JitteredRay ray)
{
    float t0 = DecodeLogarithmicDepthGeneralized(0, _VBufferDistanceDecodingParams);
    float de = _VBufferRcpSliceCount; // Log-encoded distance between slices

    for (uint slice = 0; slice < _VBufferSliceCount; slice++)
    {
        // uint3 voxelCoord = uint3(voxelCoord2D, slice + _VBufferSliceCount * unity_StereoEyeIndex);
        uint3 voxelCoord = uint3(voxelCoord2D, slice);

        float e1 = slice * de + de; // (slice + 1) / sliceCount
        float t1 = DecodeLogarithmicDepthGeneralized(e1, _VBufferDistanceDecodingParams);
        float dt = t1 - t0;
        float t  = t0 + 0.5 * dt;

        float3 voxelCenterWS = ray.originWS + t * ray.centerDirWS;

        // TODO: the fog value at the center is likely different from the average value across the voxel.
        // Compute the average value.
        float fragmentHeight   = voxelCenterWS.y;
        float heightMultiplier = ComputeHeightFogMultiplier(fragmentHeight, _HeightFogBaseHeight, _HeightFogExponents);

        // Start by sampling the height fog.
        float3 voxelScattering = _HeightFogBaseScattering.xyz * heightMultiplier;
        float  voxelExtinction = _HeightFogBaseExtinction * heightMultiplier;

        _VBufferDensity[voxelCoord] = float4(1, 1,1,1);

        t0 = t1;
    }
}

[numthreads(GROUP_SIZE_1D, GROUP_SIZE_1D, 1)]
void VolumeVoxelization(uint3 dispatchThreadId : SV_DispatchThreadID,
                        uint2 groupId          : SV_GroupID,
                        uint2 groupThreadId    : SV_GroupThreadID)
{
    // UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    // float3 F = GetViewForwardDir();
    // float3 U = GetViewUpDir();
    uint2 groupOffset = groupId * GROUP_SIZE_1D;
    uint2 voxelCoord1  = groupOffset + groupThreadId;
    //for (uint slice = 0; slice < 128; slice++)
    //{
        uint3 voxelCoord=uint3(voxelCoord1, 64);
        _VBufferDensity[voxelCoord] = float4(1,1,1,1);
    //}
    // float2 centerCoord = voxelCoord + float2(0.5, 0.5);
    //
    // // Compute a ray direction s.t. ViewSpace(rayDirWS).z = 1.
    // float3 rayDirWS       = mul(-float4(centerCoord, 1, 1), _VBufferCoordToViewDirWS).xyz;  // _VBufferCoordToViewDirWS[unity_StereoEyeIndex]
    // float3 rightDirWS     = cross(rayDirWS, U);
    // float  rcpLenRayDir   = rsqrt(dot(rayDirWS, rayDirWS));
    // float  rcpLenRightDir = rsqrt(dot(rightDirWS, rightDirWS));
    //
    // JitteredRay ray;
    // ray.originWS    = GetCurrentViewPosition();
    // ray.centerDirWS = rayDirWS * rcpLenRayDir; // Normalize
    //
    // float FdotD = dot(F, ray.centerDirWS);
    // float unitDistFaceSize = _VBufferUnitDepthTexelSpacing * FdotD * rcpLenRayDir;
    //
    // ray.xDirDerivWS = rightDirWS * (rcpLenRightDir * unitDistFaceSize); // Normalize & rescale
    // ray.yDirDerivWS = cross(ray.xDirDerivWS, ray.centerDirWS); // Will have the length of 'unitDistFaceSize' by construction
    // ray.jitterDirWS = ray.centerDirWS; // TODO
    //
    // // ApplyCameraRelativeXR(ray.originWS);
    //
    // FillVolumetricDensityBuffer(voxelCoord, ray);
}

